import { logger } from "../utils/logger";

class NotificationService {
  private lastNotificationTime: Date | null = null;
  private readonly MIN_INTERVAL_MS = parseInt(
    process.env.MIN_INTERVAL_MS || "60000",
    10
  ); // 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  constructor() {
    logger.info({
      message: "NotificationService initialized",
      minIntervalMs: this.MIN_INTERVAL_MS,
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @returns true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, false –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
   */
  private canSendNotification(): boolean {
    if (!this.lastNotificationTime) {
      return true;
    }

    const currentTime = Date.now();
    const timeSinceLastNotification =
      currentTime - this.lastNotificationTime.getTime();

    return timeSinceLastNotification >= this.MIN_INTERVAL_MS;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private updateLastNotificationTime(): void {
    this.lastNotificationTime = new Date();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ vehicle detection —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
   * @param eventData - –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
   * @param notificationFunction - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendVehicleDetectionNotification<T>(
    eventData: T,
    notificationFunction: (data: T) => Promise<void>
  ): Promise<void> {
    const currentTime = Date.now();

    if (!this.canSendNotification()) {
      logger.warn({
        message: "üü° Vehicle detection notification skipped - too frequent",
        lastNotificationTime: this.lastNotificationTime?.toISOString(),
        timeSinceLastNotification: this.lastNotificationTime
          ? currentTime - this.lastNotificationTime.getTime()
          : 0,
        currentRequestTime: new Date(currentTime).toISOString(),
      });
      return;
    }

    try {
      await notificationFunction(eventData);
      this.updateLastNotificationTime();
    } catch (error) {
      logger.error({
        message: "‚ùå Failed to send vehicle detection notification",
        error: error instanceof Error ? error.message : "Unknown error",
        requestTime: new Date(currentTime).toISOString(),
      });
      // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ,
      // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const notificationService = new NotificationService();
